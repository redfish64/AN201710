
We have a TypedExp with a value and a type.

A context. This is used to restrict a typed expr to only vars within a context.
The inner value of a lam, pi, or let get a var added to them.

A problem is that for a TypedExp, it needs a TypedExp as it's type,
and so on. We can't reference a TypedExp in the declaration of itself,
so we need another way.

Can the type be computed? From what I read, no, but I don't exactly
understand why.

In isolation, of course it cannot, because a type may contain vars and
other functions that need to be executed that are expected to be in
the context.

What if we had a function, typeForExp : Expr -> Expr

Maybe typeForExp can return a pair with a proof that its return value
is the type for the expr according to some rules.

For AddLamVar:

We need an outer context, and a type for the var. The type of the type must be of
type Type n (ie. you can't write a lam (x : 3 -> _))

The problem is that we can't construct an exp, using its data
constructor "TypeN", because ANTExpr also wants to construct a
context, using its data constructor "AddLamVar"

Two data types can't mutually use each others constructors.

We also can't create a TypedExpr, for reasons above (recursive data's
witin their type, ie not in their data constructors).

---

We will do Pi before Lam, since Lam needs to construct a Pi expression
as its type

--

 |-- ANT.idr line 97 col 32:
 |   When checking type of Lam:
 |   When checking argument T to Main.Pi:
 |           Unifying g and AddPiVar g S' prf would lead to infinite value

The problem here is that  (typeForExp (Pi g S' prf T) uses a T that
is in the same context as S'. However Pi demands (T : ANTExp (AddPiVar g S' prf))

T is in both.

I think we either need to allow expressions to exist in multiple contexts
or create multiple versions of the same expression that are linked together
yet have different contexts.

The concept here is that if an exp exists in Context A, then it also exists
in AddPiVar(Context A), or AddLamVar(Context A). Soon we'll have AddLetVar(Context A)
as well and will have to deal with it as well.

.

We need to add the concept of two expressions being the same even if
the contexts are different.

I think we can do this by making a Belongs type. So if belongs to one
type then it also belongs to its successor.

.

Could we use a list inside of ANTContext? Does Here and There help us for
proof that a var is in a context?

The problem is that when a context implies something, that doesn't
necessary mean it has a var associated with it

.

There are two concepts here:

1. An expression was created from a particular context

2. An expression that is implied by one context can also be implied by
   another

But 1 isn't really important. It doesn't matter where an expression
was created, only what context imply it.

Although that is true, somewhere, we need to record the fact that the
expression is implied by at least one context.

So we get to here and there, because that is what Implies is, really.
And List is what a context is, really. Well, except that it's a list
of a bunch of arguments, binder, S', and prf that the type of S' is a type

Maybe we could have a Binding to represent it.

However, maybe I'm getting ahead of myself, I don't want things too
complicated just to add abstraction

---

Getting rid of Binder, because Let requires two exp, type and value, whereas
Lam and Pi only require one

---

Adding a LetBinding. I'm not sure why there is a Let in Idris core lang, rather
than just App (Lam x : S) s. Maybe it has something to do with substitution.
Anyway, I'm staying true to it, even though I don't understand the purpose.

---

An ANTContext is more than just a list of bindings, because the bindings
have to be for the context

I think we are going in circles, here. Forget the list, it's more
complex than a list, since a list allows any object of type elem to be
added, but a binding needs to have it's variables based on the context or below.

---

Anytime you add a variable to an ANTContext, any expression that was
valid in the previous context is valid in the current one, too.

Before I start to abstract this out, I think I need to implement var
references so I don't screw it up.

---

wrt ContextEncompasses

Which direction should it go? Actually it's a little wrong, isn't it.
The vars of a child context *can* replace those of a parent if we
aren't using debrujin.

The odd thing is that we aren't using debrujin correctly right now,
because as we go inwards, we are increasing the count. It should be
the opposite to work like debrujin.

Ah, no we're not. Because the first binding you take off is the first
element of the "list" that the context is.

However, this all depends on our definition of Var, and which end does
it take from. It seems that it would have to take from the far end, though...
ie If there are 3 vars in the Context, then Var 2 would take from the front
and Var 0 would take from the back.

This way we won't have to shift var references everytime we add a var. We
couldn't do this anyway.

So yes, reverse debrujin
