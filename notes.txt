
We have a TypedExp with a value and a type.

A context. This is used to restrict a typed expr to only vars within a context.
The inner value of a lam, pi, or let get a var added to them.

A problem is that for a TypedExp, it needs a TypedExp as it's type,
and so on. We can't reference a TypedExp in the declaration of itself,
so we need another way.

Can the type be computed? From what I read, no, but I don't exactly
understand why.

In isolation, of course it cannot, because a type may contain vars and
other functions that need to be executed that are expected to be in
the context.

What if we had a function, typeForExp : Expr -> Expr

Maybe typeForExp can return a pair with a proof that its return value
is the type for the expr according to some rules.

For AddLamVar:

We need an outer context, and a type for the var. The type of the type must be of
type Type n (ie. you can't write a lam (x : 3 -> _))

The problem is that we can't construct an exp, using its data
constructor "TypeN", because ANTExpr also wants to construct a
context, using its data constructor "AddLamVar"

Two data types can't mutually use each others constructors.

We also can't create a TypedExpr, for reasons above (recursive data's
witin their type, ie not in their data constructors).

---

We will do Pi before Lam, since Lam needs to construct a Pi expression
as its type

--

 |-- ANT.idr line 97 col 32:
 |   When checking type of Lam:
 |   When checking argument T to Main.Pi:
 |           Unifying g and AddPiVar g S' prf would lead to infinite value

The problem here is that  (typeForExp (Pi g S' prf T) uses a T that
is in the same context as S'. However Pi demands (T : ANTExp (AddPiVar g S' prf))

T is in both.

I think we either need to allow expressions to exist in multiple contexts
or create multiple versions of the same expression that are linked together
yet have different contexts.

The concept here is that if an exp exists in Context A, then it also exists
in AddPiVar(Context A), or AddLamVar(Context A). Soon we'll have AddLetVar(Context A)
as well and will have to deal with it as well.

.

We need to add the concept of two expressions being the same even if
the contexts are different.

I think we can do this by making a Belongs type. So if belongs to one
type then it also belongs to its successor.

.

Could we use a list inside of ANTContext? Does Here and There help us for
proof that a var is in a context?

The problem is that when a context implies something, that doesn't
necessary mean it has a var associated with it

.

There are two concepts here:

1. An expression was created from a particular context

2. An expression that is implied by one context can also be implied by
   another

But 1 isn't really important. It doesn't matter where an expression
was created, only what context imply it.

Although that is true, somewhere, we need to record the fact that the
expression is implied by at least one context.

So we get to here and there, because that is what Implies is, really.
And List is what a context is, really. Well, except that it's a list
of a bunch of arguments, binder, S', and prf that the type of S' is a type

Maybe we could have a Binding to represent it.

However, maybe I'm getting ahead of myself, I don't want things too
complicated just to add abstraction

---

Getting rid of Binder, because Let requires two exp, type and value, whereas
Lam and Pi only require one

---

Adding a LetBinding. I'm not sure why there is a Let in Idris core lang, rather
than just App (Lam x : S) s. Maybe it has something to do with substitution.
Anyway, I'm staying true to it, even though I don't understand the purpose.

---

An ANTContext is more than just a list of bindings, because the bindings
have to be for the context

I think we are going in circles, here. Forget the list, it's more
complex than a list, since a list allows any object of type elem to be
added, but a binding needs to have it's variables based on the context or below.

---

Anytime you add a variable to an ANTContext, any expression that was
valid in the previous context is valid in the current one, too.

Before I start to abstract this out, I think I need to implement var
references so I don't screw it up.

---

wrt ContextEncompasses

Which direction should it go? Actually it's a little wrong, isn't it.
The vars of a child context *can* replace those of a parent if we
aren't using debrujin.

The odd thing is that we aren't using debrujin correctly right now,
because as we go inwards, we are increasing the count. It should be
the opposite to work like debrujin.

Ah, no we're not. Because the first binding you take off is the first
element of the "list" that the context is.

However, this all depends on our definition of Var, and which end does
it take from. It seems that it would have to take from the far end, though...
ie If there are 3 vars in the Context, then Var 2 would take from the front
and Var 0 would take from the back.

This way we won't have to shift var references everytime we add a var. We
couldn't do this anyway.

So yes, reverse debrujin

---

I think ChildContextImpliesSame is a bad idea, because given two
expressions such as TypeN, they are obivous equal, even if in
completely separate contexts.

---

Reflection

Where is alpha equivalence?

---

New plan, use haskell.

----

We are trying to keep Idris as pure to the original by placing it in a
sub directory and writing code to interface with it.

We'll refrain from copying too much code, though.

The goal is to make our hacked idris version easy to upgrade to the
newest idris version if necessary.

---

Here are the methods:

record Restrictions where
    constructor MkRestrictions
    maxEvalCycles : Integer --^ Maximum number of steps to allow for evaluation before forcefully 
                            --^ killing the computation (akin to Ethereum Gas)
    maxMemory : Integer --^ Maximum memory to be allocated before evaluation forcefully terminates
    allowedTermRefs : [TTName] --^ Modules and functions the restricted code is allowed to call

data RestrictiveModeResult : (memoryUsedInResult : Integer) -> (cpuCycles : Integer) -> x where
    OK : x -> RestriveModeResult
    FailedOutOfMem : RestriveModeResult
    FailedOutOfEvalCycles : RestriveModeResult 

-- | functions must be total, only certain modules can be referenced, based on Restrictions
runRestrictiveMode : Restrictions -> (a -> b) -> RestrictiveModeResult b

{- Compiles "code" to the given type specified by A. Returns error msg on failure -}   
compileToType : (A : Type) -> (code : TT) -> Either String A 

{- Defines a symbol described by "name". "name" can then be referenced in code 
   generated with "compileToType" -}
define : (name : String) -> (A : Type) -> TT -> ANMonad (Either String A) 

{- Undefines a symbol described by "name", and deletes associated term from the code base -}
undefine : (name : String) -> ANMonad (Either String ())

Note: the following is a very preliminary rough draft:

Interface for Closed Phase (which Core calls):

startup : ANMonad ()
blockReceived : (blockIndex : Integer) -> Vector (Fin n) Word8 -> ANMonad { maxBlockSize=n } ()
shutdown : ANMonad ()
userMsgReceived : String -> ANMonad ()
...

Interface for Core (which Closed Phase calls)

compileToType : (A : Type) -> TT -> Maybe A
define : (name : String) -> (A : Type) -> TT -> ANMonad (Either String A)
undefine : (name : String) -> ANMonad (Either String ())
{- "a" is a state that gets passed back to itself every loop
   Root will be in charge of managing size of state, and usage of CPU -}
runLoop : (a -> ANMonad a) -> ANMonad ()

{- Forks a thread if allowed. -}
forkThread : ANMonad () -> ANMonad (Either String ThreadID)

-- interthread communication
createMVar : MVar x
writeMVar : x -> MVar x -> ANMonad ()
readMVar : MVar x -> ANMonad x

{- Channels are different ways the context can communicate with the user. For example
   one channel could be for a http connection and serve html. Another could be
   for use with some video game -}
openChannel : String -> ANMonad Channel
closeChannel : Channel -> ANMonand

-- | writes a message to the user
userOut : String -> Channel -> ANMonad ()
-- | waits for user msg
userIn : Channel -> ANMonad String





There will be root which is just Idris. It will have:

-- | runs a monad to create functions. Functions will be available right away
-- | for any further compiled code to run them
runANMonad : ANMonad -> ()


-- | functions must be total, only certain modules can be referenced
runRestrictiveMode : Restrictions -> (a -> b) -> b

The planned out core system will regular idris. It will handle
the p2p network, messaging, sending/receiving blocks, user i/o.
After starting up the networking code, it will call the genesis
start in restrictive mode (by calling runRestrictiveMode), expecting a
ANMonad back.

Blocks to the root system are simply packets of data. It doesn't
handle chaining or reorging blocks. Genesis does this, and is
responsible for further restrictions on blocks after itself as far as
scoring, reorgs, etc. In particular, Genesis must enforce that the
blocks after it cannot exploit reorgs in order to prevent a competing
valid chain from becoming the main one.



Core


----

idris [(InterpretScript "1")]
can be run from haskell.

idris [ImportDir "/home/tim/projects/AN201710/idris/libs/prelude/", (InterpretScript "putStrLn \"1\"")]

----

from execScript in Main.hs
parseExpr creates a PTerm
elabVal parses a PTerm, creates definitions in the state *and* parses a PTerm into a TT Term and type.
"execute" runs the expression


TTDeclr represents something that can be named within Context

execScript shows how to take a PTerm (generated by a parser) and convert it into a
term. It also alters state to define names, and probably other things.
This means we can add terms to the state, provide we have a PTerm, but we can't
delete them.

This may not be a problem, because we can just use an earlier copy of IState.
Then, all it is a matter of is generating a PTerm, adding it into the context for
each block. When we want to go back, we load a previous state.

However, with this simple plan, memory will be a problem. We should
get some more detail by running this code first, then we can tackle
the memory problem.

Restricted mode is going to be more difficult because we will need to
worry about generated memory. Idris doesn't manage its own memory,
this is done by haskell.

CPU usage is pretty straight forward, though.

---

If from a PTerm, I get a term and some other definitions placed into
state, I could make just a term. I could run that in a context. I
could alter the context to have additional names that I want outside
of the main idris state.

So it seems like the best approach would be to use the Idris state for
unrestricted mode, and the ability to compile only works in restricted
mode.

So we need to deal with context. I think.  execScript uses Context, it
gets it from the Idris monad.  It then calls elabVal which changes a
pterm using context into a term + a type, then it calls execute with
the term.

-- | Execute the provided Idris expression.
execScript :: String -> Idris ()
execScript expr = do i <- getIState
                     c <- colourise
                     case parseExpr i expr of
                          Failure (ErrInfo err _) -> do iputStrLn $ show (fixColour c err)
                                                        runIO $ exitWith (ExitFailure 1)
                          Success term -> do ctxt <- getContext
                                             (tm, _) <- elabVal (recinfo (fileFC "toplevel")) ERHS term
                                             res <- execute tm
                                             runIO $ exitSuccess

The thing is that we won't have just a term, will we? Can we get buy
with a bunch of terms and names? Or do we need a PTerm?

data QSAcc : List Nat -> Type where
  QSAccCase0 : QSAcc []
  QSAccCase1 : QSAcc (filter (< x) xs) ->
               QSAcc (filter (>= x) xs) ->
               QSAcc (x :: xs)
λΠ> QSAccCase0
QSAccCase0 : QSAcc []
λΠ> `(QSAccCase0)
P (DCon 0 0)
  (NS (UN "QSAccCase0") ["Elab", "Learn"])
  (App (P (TCon 0 0) (NS (UN "QSAcc") ["Elab", "Learn"]) Erased)
       (App (P (DCon 0 1) (NS (UN "Nil") ["List", "Prelude"]) Erased)
            (P (TCon 8 0) (NS (UN "Nat") ["Nat", "Prelude"]) Erased))) : TT
λΠ> QSAcc
QSAcc : List Nat -> Type
λΠ> `(QSAcc)
P (TCon 15 1)
  (NS (UN "QSAcc") ["Elab", "Learn"])
  (Bind (UN "__pi_arg")
        (Pi (App (P (TCon 8 1) (NS (UN "List") ["List", "Prelude"]) Erased)
                 (P (TCon 8 0) (NS (UN "Nat") ["Nat", "Prelude"]) Erased))
            (TType (UVar "./Elab.idr" 43)))
        (TType (UVar "./Elab.idr" 44))) : TT

The above means that type and data constructors can be represented as terms

So I think, then, if I can create some sort of special Context-like
structure with names to terms, we can basically include anything that
regular idris can do (with exception of unification), but we don't need
unification anyway.

execute (which executes the term) also returns an Idris monad, and also messes
with the context, using getContext

execute :: Term -> Idris Term
execute tm = do est <- initState
                ctxt <- getContext
                res <- lift . lift . flip runExec est $
                         do res <- doExec [] ctxt tm
                            toTT res
                case res of
                  Left err -> ierror err
                  Right tm' -> return tm'
		  
execute only pulls dat  from getContext, and then it runs runExec, which doesn't use the Idris monad. This means that we only need to mess with the context inside of IState.

So, our execScript method would do something like:

(~lens update~ tt_ctx istate (\ctx -> addOurSpecialCtx ctx)),
then call execute.

runExec :: Exec a -> ExecState -> IO (Either Err a)
runExec ex st = fst <$> runStateT (runExceptT ex) st

doExec :: ExecEnv -> Context -> Term -> Exec ExecVal

toTT :: ExecVal -> Exec Term

---

Memory leak in GHCI. A memory leak occurs when reloading using emacs against anything.

It doesn't occur when using stack ghci, although stack ghci will take a lot of memory,
almost 3Gig after repeated compilations.

2.842g
2.851g

after compiling a different module, Idris/Parser.hs
2.928g

after running
idris [ImportDir "/home/tim/projects/AN201710/idris/libs/prelude/", (InterpretScript "putStrLn \"232\"")]
3.234g


idrisMain gets run by "idris" (how we start it) and it is an Idris monad.
This is how it's run:
    runExceptT $ execStateT (idrisMain opts) idrisInit

This works:
     runExceptT $ execStateT (idrisMain [ImportDir "/home/tim/projects/AN201710/idris/libs/prelude/", (InterpretScript "putStrLn \"2\"")]) idrisInit
except it throws "*** Exception: ExitSuccess" so we can't get hold of the IState

System.Exit.exitSuccess does this

-- | The monad for the main REPL - reading and processing files and
-- updating global state (hence the IO inner monad).
--
-- @
--     type Idris = WriterT [Either String (IO ())] (State IState a))
-- @
--
type Idris = StateT IState (ExceptT Err IO)

That is the monad.

*Idris.Main> runExceptT $ execStateT (setImportDirs ["/home/tim/projects/AN201710/idris/libs/prelude/"]) idrisInit
Right {internal state}

*Idris.Main> (Right is) <- runExceptT $ execStateT (setImportDirs ["/home/tim/projects/AN201710/idris/libs/prelude/"]) idrisInit
*Idris.Main> is
{internal state}

*Idris.Main> runExceptT $ execStateT (execScript "putStrLn \"2\"") is
Left NoSuchVariable {__infer_0}

So importing prelude didn't help. It worked so quickly, I wonder if

Right is <- runExceptT $ execStateT (setImportDirs ["/home/tim/projects/AN201710/idris/libs/prelude/"] >> loadModule "Builtins" (IBC_REPL False) >> addAutoImport "Builtins" >> loadModule "Prelude" (IBC_REPL False) >> addAutoImport "Prelude") idrisInit

*Idris.Main> runExceptT $ execStateT (execScript "putStrLn \"2\"") is
Left NoSuchVariable {__infer_0}

still no such variable

*Idris.Main> Right is <- runExceptT $ execStateT (setImportDirs ["/home/tim/projects/AN201710/idris/libs/prelude/"] >> elabPrims >> loadModule "Builtins" (IBC_REPL False) >> addAutoImport "Builtins" >> loadModule "Prelude" (IBC_REPL False) >> addAutoImport "Prelude") idrisInit
*Idris.Main> runExceptT $ execStateT (execScript "putStrLn \"2\"") is
2
*** Exception: ExitSuccess

*Idris.Main> let (Success t) = parseExpr is "putStrLn \"2\""

*Idris.Main> parseExpr is "foo = 1\n"
Success (foo = (|fromInteger 1 , 1 , 1 , 1 , 1 , 1 , 1 , |))

But I don't know how to combine two lines. MAybe you can't

*Idris.Main> parseExpr is "data Foo : Type where \n  Bar : Foo"
Failure (ErrInfo {_errDoc = (input):1:1: error: expected: dependent type signature
data Foo : Type where  
^                      , _errDeltas = [Directed "(input)" 0 0 0 0]})

Hmm, no data types? Yet functions, work?

*Idris.Main> parseExpr is "foo : Int\nfoo = 1\n"
Failure (ErrInfo {_errDoc = (input):1:5: error: expected: "$",
...

Not if you specify them with a type line

let (Success term) = parseExpr is "putStrLn \"2\""
runExceptT $ execStateT (elabVal (recinfo (fileFC "toplevel")) ERHS term) is

The following complete script works from ghci

Right is <- runExceptT $ execStateT (setImportDirs ["/home/tim/projects/AN201710/idris/libs/prelude/"] >> elabPrims >> loadModule "Builtins" (IBC_REPL False) >> addAutoImport "Builtins" >> loadModule "Prelude" (IBC_REPL False) >> addAutoImport "Prelude") idrisInit
runExceptT $ execStateT (execScript "putStrLn \"2\"") is
let (Success term) = parseExpr is "putStrLn \"hello idris internal world\""
runExceptT $ execStateT (elabVal (recinfo (fileFC "toplevel")) ERHS term >>= (\(tm,_) -> execute tm)) is

----

The following prints out a ton of stuff:

    runExceptT $ Control.Monad.Trans.State.Strict.evalStateT (getContext) is

--

Interesting function, maybe we can use later:

-- | Cast a 'TT' term to a 'Raw' value, discarding universe information and
-- the types of named references and replacing all de Bruijn indices
-- with the corresponding name. It is an error if there are free de
-- Bruijn indices.
forget :: TT Name -> Raw
forget tm = forgetEnv [] tm

Raws aren't used much in TT.hs.

tim@silverhat ~/projects/AN201710 $ grepf -qc '*hs' '\bRaw\b'
./idris/src/IRTS/CodegenC.hs: 1
./idris/src/IRTS/CodegenCommon.hs: 1
./idris/src/Idris/REPL.hs: 1
./idris/src/Idris/Core/ProofState.hs: 33
./idris/src/Idris/Core/Elaborate.hs: 23
./idris/src/Idris/Core/Typecheck.hs: 5
./idris/src/Idris/Core/Binary.hs: 1
./idris/src/Idris/Core/TT.hs: 17
./idris/src/Idris/Core/DeepSeq.hs: 1
./idris/src/Idris/Elab/Term.hs: 8
./idris/src/Idris/Reflection.hs: 67
./idris/src/Idris/CmdOptions.hs: 1
./idris/src/Idris/AbsSyntaxTree.hs: 1
./idris/src/Idris/DataOpts.hs: 3

Typecheck.hs
get_type_val :: Raw -> Elab' aux (Term, Type)

Here we can commit it back ^^^^^

type Elab' aux a = StateT (ElabState aux) TC a
type Elab a = Elab' () a

data ElabState aux = ES (ProofState, aux) String (Maybe (ElabState aux))
  deriving Show

data Idris.Core.Elaborate.ElabState aux
  = Idris.Core.Elaborate.ES (Idris.Core.ProofState.ProofState, aux)
                            String
                            (Maybe (Idris.Core.Elaborate.ElabState aux))
  	-- Defined at /home/tim/projects/AN201710/idris/src/Idris/Core/Elaborate.hs:30:1
instance Show aux => Show (Idris.Core.Elaborate.ElabState aux)
  -- Defined at /home/tim/projects/AN201710/idris/src/Idris/Core/Elaborate.hs:31:12

-----

loadSource
reads file into text, calls  (mdocs, mname, imports_in, pos) <- parseImports f file

handles imports and calls:

-- | A program is a list of declarations, possibly with associated
-- documentation strings.
parseProg :: SyntaxInfo -> FilePath -> String -> Maybe Delta ->
             Idris [PDecl]

calls:

prog :: SyntaxInfo -> IdrisParser [PDecl]

for each decleration

type PDecl   = PDecl' PTerm
-- | Top-level declarations such as compiler directives, definitions,
-- datatypes and interfaces.


then loadSource calls elabDecls which puts it all into the context
Then it does totality checking and universe checking. What is universe checking??

-- | Check that a list of universe constraints can be satisfied.
ucheck :: S.Set ConstraintFC -> TC ()




data PDecl' t
   -- | Fixity declaration
   = PFix FC Fixity [String]
   -- | Type declaration (last FC is precise name location)
   | PTy (Docstring (Either Err t)) [(Name, Docstring (Either Err t))] SyntaxInfo FC FnOpts Name FC t
   -- | Postulate, second FC is precise name location
   | PPostulate Bool -- external def if true
          (Docstring (Either Err t)) SyntaxInfo FC FC FnOpts Name t
   -- | Pattern clause
   | PClauses FC FnOpts Name [PClause' t]
   -- | Top level constant
   | PCAF FC Name t
   -- | Data declaration.
   | PData (Docstring (Either Err t)) [(Name, Docstring (Either Err t))] SyntaxInfo FC DataOpts (PData' t)
   ...

----

It looks like PClauses FC FnOpts Name [PClause' t] *can* represent a top level definition
PDecl is showable (type PDecl   = PDecl' PTerm)
So we could possibly parse simple files and learn what their ptypes are


To read a source file (from loadSource)

(mdocs, mname, imports_in, pos) <- parseImports f file
ds' <- parseProg syntax f file pos
parseProg :: SyntaxInfo -> FilePath -> String -> Maybe Delta ->
             Idris [PDecl]

runExceptT $ execStateT (parseIntoPTypes "Foo" "module Foo where\n\nfoo = 123") idrisInit


λ> (Right [(Idris.AbsSyntaxTree.PClauses a b c d)]) <- runExceptT $ evalStateT (parseIntoPTypes "Foo" "\n\nfoo = 'c'") idrisInit
λ> (a,b,c,d)
(Foo:3:1,[],Main.foo,[Main.foo  = 'c' where []])

---

-- | Generate a pattern from an 'impossible' LHS.
--
-- We need this to eliminate the pattern clauses which have been
-- provided explicitly from new clause generation.
--
-- This takes a type directed approach to disambiguating names. If we
-- can't immediately disambiguate by looking at the expected type, it's an
-- error (we can't do this the usual way of trying it to see what type checks
-- since the whole point of an impossible case is that it won't type check!)
mkPatTm :: PTerm -> Idris Term

Parser returns PDecl's that contain PTerm's

elabDecl gets run from the parser

elabClauses handles top level term definitions It must handle totally
checking, so it collects all the definitions so it can do this (I think).

elabClause handles a specific clause. It actually turns pterms into
terms.

---

